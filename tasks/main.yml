---
- name: Disable wpa_supplicant service (since WiFi should not be configured).
  ansible.builtin.systemd:
    name: wpa_supplicant
    enabled: false
    state: stopped
  ignore_errors: true  # ignore errors if service not found
  failed_when: false  # do not fail if service not found
  when: wireless_network_interface is not defined

- name: Find all device-specific wpa_supplicant services (e.g., wpa_supplicant@wlan0).
  ansible.builtin.shell: systemctl list-units --all --type=service | grep 'wpa_supplicant@'
  register: wpa_services
  failed_when: false  # do not fail if grep finds no matching services
  ignore_errors: true
  changed_when: false
  when: wireless_network_interface is not defined

- name: Disable device-specific wpa_supplicant services.
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: false
    state: stopped
  loop: "{{ wpa_services.stdout_lines | map('regex_search', 'wpa_supplicant@[\\w]+\\.service') | select('string') | list }}"
  when: wpa_services.stdout_lines is defined and wpa_services.stdout_lines | length > 0
  ignore_errors: true
  failed_when: false
  when: wireless_network_interface is not defined

- name: Remove network components which are not required since WiFi should not be configured.
  apt:
    name: "wpasupplicant"
    state: absent
  when: wireless_network_interface is not defined

- name: Install wireless network components since WiFi should be configured.
  apt:
    name: "wpasupplicant"
    state: present
  when: wireless_network_interface is defined

- name: Install the required components for managing all network interfaces.
  apt:
    name: "{{ item }}"
    state: present
  loop:
    - systemd-resolved # has to be the last one; otherwise DNS resolving breaks right after install

- name: Ensure that the required services are running.
  systemd_service:
    name: "{{ item }}"
    state: started
    enabled: yes
  loop:
    - systemd-networkd
    - systemd-resolved

- name: Check if /etc/resolv.conf is linked or a simple file.
  stat: path=/etc/resolv.conf
  register: resolv_conf_state

- name: Remove an potential existing resolv.conf.
  file:
    dest: "/etc/resolv.conf"
    state: absent
  when: resolv_conf_state.stat.lnk_target is not defined or resolv_conf_state.stat.lnk_target != '/run/systemd/resolve/resolv.conf'

- name: Link the systemd-resolved config to the one of the system.
  file:
    src: "/run/systemd/resolve/resolv.conf"
    dest: "/etc/resolv.conf"
    state: link
  when: resolv_conf_state.stat.lnk_target is not defined or resolv_conf_state.stat.lnk_target != '/run/systemd/resolve/resolv.conf'

- name: Configuring wireless network interface.
  template:
    src: "templates/wpa_supplicant.conf.j2"
    dest: "/etc/wpa_supplicant/wpa_supplicant-wlan0.conf"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  notify:
    - Restart wireless networking
  when: wireless_network_interface is defined

- name: Removing wireless network interface configuration.
  file:
    path: "/etc/wpa_supplicant/wpa_supplicant-wlan0.conf"
    state: absent
  when: wireless_network_interface is not defined

#- name: Detect if there are network configurations which are not managed by this playbook.
#  ansible.builtin.find:
#    paths: /etc/systemd/network/
#    patterns: "*.network"
#  register: old_configs
#  changed_when: false
#
#- name: Remove old configuration files.
#  ansible.builtin.file:
#    path: "{{ item.path }}"
#    state: absent
#  loop: "{{ old_configs.files }}"
#  when: old_configs.matched > 0

- name: Configuring network all interfaces.
  template:
    src: "templates/interface.j2"
    dest: "/etc/systemd/network/10-{{ item.interface }}.network"
#    dest: "/etc/systemd/network/{{ '%02d' | format(10 * item.0) }}-{{ item.1.interface }}.network"
    owner: root
    group: root
    mode: u=rw,g=r,o=r
  with_items: "{{ network_interfaces }}"
#  with_indexed_items: "{{ network_interfaces }}"
  notify:
    - Restart wired networking

- name: Enable all required wired services for network setup during boot.
  systemd_service:
    name: "{{ item }}"
    enabled: yes
  loop:
    - systemd-resolved
    - systemd-networkd

- name: Enable all required wireless services for network setup during boot.
  systemd_service:
    name: "{{ item }}"
    enabled: yes
  loop:
    - wpa_supplicant@wlan0
  when: wireless_network_interface is defined

- name: Ensure that there are no other network managing daemons running.
  systemd_service:
    name: "{{ item }}"
    state: stopped
    enabled: false
  loop:
    - NetworkManager
    - dhcpcd
  register: stop_service
  failed_when:
    - stop_service.failed == true
    - '"Could not find the requested service" not in stop_service.msg'

- name: Uninstall all components which are not required anymore.
  apt:
    name: "{{ item }}"
    state: absent
    autoremove: yes
  loop:
    - network-manager
    - dhcpcd
